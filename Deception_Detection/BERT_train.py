# -*- coding: utf-8 -*-
"""진실거짓판.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15Sr_qipr20AV6R5DHL8dsiE1X9k4I9j5
"""

from google.colab import drive
drive.mount('/content/drive')

pip install transformers[torch] accelerate -U

import pandas as pd
import torch
from sklearn.model_selection import train_test_split
from transformers import BertTokenizer, BertForSequenceClassification, Trainer, TrainingArguments
from transformers import TextClassificationPipeline
import pickle


df = pd.read_csv('/content/drive/MyDrive/Project/기만탐지모델/politifact_clean_binarized.csv')

# CPU 사용
device = torch.device("cpu")

# 특성과 레이블 분리
X = df['statement'].tolist()
y = df['veracity'].tolist()

# 데이터 분리
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# BERT 토크나이저 로드
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

# 토큰화 및 인코딩
train_encodings = tokenizer(X_train, truncation=True, padding=True, max_length=512)
test_encodings = tokenizer(X_test, truncation=True, padding=True, max_length=512)

# 데이터셋 정의
class FakeNewsDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

    def __len__(self):
        return len(self.labels)

train_dataset = FakeNewsDataset(train_encodings, y_train)
test_dataset = FakeNewsDataset(test_encodings, y_test)

# BERT 모델 로드
model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=2).to(device)

# 트레이너 설정
training_args = TrainingArguments(
    output_dir='./results',
    num_train_epochs=3,
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    warmup_steps=500,
    weight_decay=0.01,
    logging_dir='./logs',
    logging_steps=10,
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=test_dataset,
)

# 모델 학습
trainer.train()

# 모델 평가
trainer.evaluate()

# 예측 파이프라인 설정
pipe = TextClassificationPipeline(model=model, tokenizer=tokenizer, device=0 if torch.cuda.is_available() else -1)

# 파이프라인 저장
with open('/content/drive/MyDrive/Project/기만탐지모델/text_classification_pipeline.pkl', 'wb') as f:
    pickle.dump(pipe, f)
